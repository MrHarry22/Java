import java.util.*;

public class BalanceBST {
    static class TreeNode {
        int val;
        TreeNode left, right;
        TreeNode(int val) { this.val = val; }
    }

    // Build BST from level-order input (with "null" support)
    public static TreeNode buildTreeFromLevelOrder(List<String> values) {
        if (values.isEmpty() || values.get(0).equals("null")) return null;

        TreeNode root = new TreeNode(Integer.parseInt(values.get(0)));
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);

        int i = 1;
        while (i < values.size()) {
            TreeNode current = queue.poll();
            if (current != null) {
                // Left child
                if (i < values.size() && !values.get(i).equals("null")) {
                    current.left = new TreeNode(Integer.parseInt(values.get(i)));
                    queue.offer(current.left);
                }
                i++;

                // Right child
                if (i < values.size() && !values.get(i).equals("null")) {
                    current.right = new TreeNode(Integer.parseInt(values.get(i)));
                    queue.offer(current.right);
                }
                i++;
            }
        }

        return root;
    }

    // In-order traversal to collect values
    public static void inOrder(TreeNode node, List<Integer> list) {
        if (node == null) return;
        inOrder(node.left, list);
        list.add(node.val);
        inOrder(node.right, list);
    }

    // Convert sorted list to balanced BST
    public static TreeNode buildBalancedBST(List<Integer> list, int left, int right) {
        if (left > right) return null;

        int mid = (left + right) / 2;
        TreeNode node = new TreeNode(list.get(mid));
        node.left = buildBalancedBST(list, left, mid - 1);
        node.right = buildBalancedBST(list, mid + 1, right);
        return node;
    }

    // Main function to balance BST
    public static TreeNode balanceBST(TreeNode root) {
        List<Integer> values = new ArrayList<>();
        inOrder(root, values);
        return buildBalancedBST(values, 0, values.size() - 1);
    }

    // Level-order traversal for output
    public static List<String> levelOrder(TreeNode root) {
        List<String> result = new ArrayList<>();
        if (root == null) return result;

        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);

        while (!queue.isEmpty()) {
            TreeNode curr = queue.poll();
            if (curr != null) {
                result.add(String.valueOf(curr.val));
                queue.offer(curr.left);
                queue.offer(curr.right);
            } else {
                result.add("null");
            }
        }

        // Trim trailing "null"s
        int i = result.size() - 1;
        while (i >= 0 && result.get(i).equals("null")) {
            result.remove(i--);
        }

        return result;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter BST in level-order (use 'null' for missing children), separated by spaces:");
        String line = scanner.nextLine();
        List<String> input = Arrays.asList(line.trim().split("\\s+"));

        TreeNode root = buildTreeFromLevelOrder(input);
        TreeNode balanced = balanceBST(root);

        System.out.println("Balanced BST in level-order:");
        System.out.println(levelOrder(balanced));

        scanner.close();
    }
}

